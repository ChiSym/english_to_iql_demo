<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>GenFact demo</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://unpkg.com/htmx.org@1.9.6" integrity="sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni" crossorigin="anonymous"></script>
    <link href="{{url_for('static',path='/output.css')}}" rel="stylesheet">
    <script type="importmap">
      {
        "imports": {
          "@lit-labs/observers/mutation-controller.js":  "https://esm.sh/@lit-labs/observers@2.0.0/mutation-controller.js",
          "json5": "https://esm.sh/json5@2.2.3",
          "lit": "https://esm.sh/lit@2.8.0",
          "lit-html/directives/if-defined": "https://esm.sh/lit-html@3.0.0/directives/if-defined.js",
          "lit/directives/live.js": "https://esm.sh/lit@2.8.0/directives/live.js",
          "lit/directives/ref.js": "https://esm.sh/lit@2.8.0/directives/ref.js",
          "papaparse": "https://esm.sh/papaparse@5.4.1",
          "vega-embed": "https://esm.sh/vega-embed@6.23.0"
        }
      }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/vega@5.30.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/vega-lite@5.19.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/vega-embed@6.26.0"></script>

    {# <script src="https://cdn.tailwindcss.com"></script> #}

    {# Required for overlaying loading indicator on top of textareas. Default htmx classes change opacity which messes with layout #}
    <style>
        .loading-indicator{
            display:none;
        }
        .htmx-request .loading-indicator{
            display:flex;
        }
        .htmx-request.loading-indicator{
            display:flex;
        }
    </style>


</head>
<body>
    <main class="h-dvh flex flex-col flex-nowrap justify-between gap-4 p-2 lg:container lg:mx-auto">
        <div id="chat" class="grow gap-10 overflow-y-auto overflow-x-hidden overscroll-contain h-full divide-y-2 divide-slate-200">
            {% block plot %}
                {% if not root %}
                    <div id="row-{{idnum}}" class="grid gap-4 grid-cols-12 grid-rows-2 grid-flow-col p-2 justify-self-end even:bg-slate-50">
                        <div id="english-{{idnum}}" class="col-span-3 whitespace-pre-wrap">{{ english_query | default("") }}</div>
                        <div id="query2-{{idnum}}" class="col-span-3"><iql-code>{{ gensql_query | default("") }}</iql-code></div>
                            {% if error %}
                                <div id="vis-{{idnum}}" class="col-span-8 row-span-2 text-red-500">Error: {{ error }}</div>
                            {% else %}
                                <div id="vis-{{idnum}}" class="col-span-9 row-span-2 w-full h-full overflow-x-auto">
                                    {% if docs %}
                                        <table class="min-w-full table-auto text-left text-sm font-light text-surface dark:text-white">
                                            <caption class="caption-top text-left font-extrabold">Physicians</caption>
                                            <thead>
                                                <tr class="bg-gray-100">
                                                    <th scope="col" class="p-2 text-left text-xs font-medium text-gray-500 capitalize tracking-wider">Histogram</th>
                                                    {% for key in doc_keys %}
                                                        <th scope="col" class="p-2 text-left text-xs font-medium text-gray-500 capitalize tracking-wider">{{ 'NPI' if key == 'npi' else key }}</th>
                                                    {% endfor %}
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {% for doc in docs %}
                                                    <tr class="h-4 border-b border-neutral-200 dark:border-white/10">
                                                        <td class="whitespace-nowrap h-full relative">
                                                            <div class="w-full h-full min-h-4 flex justify-end items-stretch bg-gray-200 rounded-none">
                                                                    <div class="h-full bg-blue-700 rounded-none" style="width: {{ (doc['proportion'] * 100)|round(2) }}%"></div>
                                                            </div>
                                                            <div class="absolute left-1 inset-y-0 h-full text-left text-xs flex flex-col justify-center text-slate-400">
                                                                <div>{{ (doc['proportion'] * 100)|round(2) }}%</div>
                                                            </div>
                                                        </td>
                                                        {% for key in doc_keys %}
                                                            <td class="whitespace-nowrap p-2">
                                                                {{ doc.get(key, '') }}
                                                            </td>
                                                        {% endfor %}
                                                    </tr>
                                                {% endfor %}
                                            </tbody>
                                        </table>
                                    {% else %}
                                        <p class="text-gray-500">No doctor data available.</p>
                                    {% endif %}

                                    {% if biz %}
                                        <table class="min-w-full table-auto text-left text-sm font-light text-surface dark:text-white mt-2">
                                            <caption class="caption-top text-left font-extrabold">Businesses</caption>
                                            <thead>
                                                <tr class="bg-gray-100">
                                                    <th scope="col" class="p-2 text-left text-xs font-medium text-gray-500 capitalize tracking-wider">Histogram</th>
                                                    {% for key in biz_keys %}
                                                        <th scope="col" class="p-2 text-left text-xs font-medium text-gray-500 capitalize tracking-wider">{{ 'Legal Name' if key == 'legal_name' else key }}</th>
                                                    {% endfor %}
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {% for biz in biz %}
                                                    <tr class="h-4 border-b border-neutral-200 dark:border-white/10">
                                                        <td class="whitespace-nowrap h-full relative">
                                                            <div class="w-full h-full min-h-4 flex justify-end items-stretch bg-gray-200 rounded-none">
                                                                <div class="h-full bg-blue-700 rounded-none" style="width: {{ (biz['proportion'] * 100)|round(2) }}%"></div>
                                                            </div>
                                                            <div class="absolute left-1 inset-y-0 h-full text-left text-xs flex flex-col justify-center text-slate-400">
                                                                <div>{{ (biz['proportion'] * 100)|round(2) }}%</div>
                                                            </div>
                                                        </td>
                                                        {% for key in biz_keys %}
                                                            <td class="whitespace-nowrap p-2">
                                                                {{ biz.get(key, '') }}
                                                            </td>
                                                        {% endfor %}
                                                    </tr>
                                                {% endfor %}
                                            </tbody>
                                        </table>
                                    {% else %}
                                        <p class="text-gray-500">No business data available.</p>
                                    {% endif %}
                                    
                                    <div class="min-w-full text-left text-md font-extrabold text-surface dark:text-white mt-2">
                                        Probability that entity is not in database: {{ "{:.2f}".format(not_found_pval * 100) }}%
                                    </div>
                                </div>
                            {# {% else %}
                                <div id="vis-{{idnum}}" class="col-span-8 row-span-2">No results found.</div> #}
                            {% endif %} 
                        <script type="text/javascript">
                            document.getElementById("vis-{{idnum}}").scrollIntoView({behavior: "smooth", block: "end", inline: "nearest"});
                        </script>
                    </div>
                {% endif %}
            {% endblock %}
        </div>

        <section id="inputs" class="grid grid-cols-12 grid-rows-5 justify-stretch items-stretch p-2 gap-y-2 gap-x-4">
            <form class="col-span-6 row-span-5 grid grid-cols-subgrid grid-rows-subgrid w-full h-full" hx-post="/post_genfact_query" hx-target="#query2">
                <div class="col-span-6 w-full text-xl font-medium flex items-end text-gray-900 dark:text-white">English</div>
                <div class="col-span-6 row-span-3 relative">
                    <div class='loading-indicator absolute flex space-x-2 justify-center items-center h-full w-full backdrop-blur-sm rounded-sm border border-gray-300'>
                        <span class='sr-only'>Loading...</span>
                        <div class='h-8 w-8 bg-gray-500 rounded-full animate-bounce [animation-delay:-0.3s]'></div>
                        <div class='h-8 w-8 bg-gray-500 rounded-full animate-bounce [animation-delay:-0.15s]'></div>
                        <div class='h-8 w-8 bg-gray-500 rounded-full animate-bounce'></div>
                    </div>
                    <textarea name="english_query" id="english_query" placeholder="Provide a short sentence containing mentions of doctors" class="w-full h-full p-2 text-gray-900 bg-gray-50 rounded-sm border border-gray-300 focus:ring-blue-500 focus:border-blue-500 resize-none"></textarea>
                </div>
                <button id="english_query_button" type="submit" class="col-span-1 col-start-6 bottom-1 right-1 font-medium text-sm px-3 py-1.5 text-white bg-blue-700 rounded-lg focus:ring-4 focus:ring-blue-200">Ask</button>
            </form>

            <form id="query2" class="col-span-6 row-span-5 grid grid-cols-subgrid grid-rows-subgrid w-full h-full" hx-post="/post_pclean_query" hx-target="#chat" hx-swap="beforeend scroll:bottom" hx-trigger="submit" hx-include="previous [name='english_query']" hx-on::after-settle="checkAutorun()">
                {% block query2 %}
                <input type="hidden" id="genfact_entity" name="genfact_entity" value="{{ ml_entity['as_object'] | tojson | forceescape if ml_entity else '' }}">
                <div class="col-span-6 w-full text-xl font-medium flex items-end text-gray-900 dark:text-white">GenFact</div>
                <div class="col-span-6 row-span-3 relative">
                    <div class='loading-indicator absolute flex space-x-2 justify-center items-center h-full w-full backdrop-blur-sm'>
                        <span class='sr-only'>Loading...</span>
                        <div class='h-8 w-8 bg-gray-500 rounded-full animate-bounce [animation-delay:-0.3s]'></div>
                        <div class='h-8 w-8 bg-gray-500 rounded-full animate-bounce [animation-delay:-0.15s]'></div>
                        <div class='h-8 w-8 bg-gray-500 rounded-full animate-bounce'></div>
                    </div>
                    <div id="query2-div" class="w-full h-full p-2 text-gray-900  rounded-sm border border-gray-300 focus:ring-blue-500 focus:border-blue-500 resize-none">
                        {% if ml_entity %}
                            {% if ml_entity|length > 0 %}
                                {{ ml_entity.entity_html | safe }}
                            {% else %}
                                <div class="text-red-500">
                                    No entities returned
                                </div>
                            {% endif %}
                        {% elif error %}
                            <div class="text-red-500">
                                Error: {{ error }}
                            </div>
                        {% endif %}
                    </div>
                </div>
                <div class="col-span-6 grid grid-cols-subgrid grid-rows-subgrid justify-between p-0">
                    <div id="qpbar" class="col-span-2"></div>
                    <script>
                        // Array of maps of generated entities and pvals. 
                        var query2Vals = {{ genfact_entities | default([]) | tojson | safe }}; 

                        {# query2Vals = query2Vals.map(x => {
                            if ("probability" in x) {
                                x.pval = x.probability; 
                            }
                          
                            return x;   
                        }); #}

                        var vegaSpec = {
                            "$schema": "https://vega.github.io/schema/vega/v5.json",
                            "width": 100,
                            "height": 50,
                            "autosize": "fit-y",
                            "data": [
                                {
                                    "name": "source",
                                    "values": query2Vals
                                },
                                {
                                    "name": "selected",
                                    "source": "source",
                                    "transform": [
                                        {
                                            "type": "filter",
                                            "expr": "datum.selected"
                                        }
                                    ]
                                }
                            ],
                            "signals": [
                                {
                                    "name": "tooltip",
                                    "value": {},
                                    "on": [
                                        {
                                            "events": "rect:mouseover",
                                            "update": "datum"
                                        },
                                        {
                                            "events": "rect:mouseout",
                                            "update": "{}"
                                        }
                                    ]
                                },
                                {
                                    "name": "highlight",
                                    "value": null,
                                    "on": [
                                        {
                                            "events": "mouseover",
                                            "update": "datum"
                                        },
                                        {
                                            "events": "mouseout",
                                            "update": "null"
                                        }
                                    ]
                                },
                                {
                                    "name": "select",
                                    "init": 'data("source")[0]', // They better be ordered...
                                    "on": [
                                        {
                                            "events": "click",
                                            "update": "datum === select ? null : datum"
                                        }
                                    ]
                                }
                            ],
                            "scales": [
                                {
                                    "name": "x",
                                    "type": "band",
                                    "domain": {
                                        "data": "source",
                                        "field": "entity_html"
                                    },
                                    "range": "width",
                                    "padding": 0.2
                                },
                                {
                                    "name": "y",
                                    "type": "linear",
                                    "domain": [0, 1],
                                    "range": "height",
                                    "nice": true,
                                    "zero": true,
                                    "clamp": true
                                }
                            ],
                            "axes": [
                                {
                                    "orient": "bottom",
                                    "scale": "x",
                                    "labels": false,
                                    "ticks": false
                                },
                                {
                                    "orient": "left",
                                    "scale": "y",
                                    "ticks": false,
                                    "labels": false
                                }
                            ],
                            "marks": [
                                {
                                    "type": "rect",
                                    "from": {
                                        "data": "source"
                                    },
                                    "encode": {
                                        "enter": {
                                            "x": {
                                                "scale": "x",
                                                "field": "entity_html"
                                            },
                                            "width": {
                                                "scale": "x",
                                                "band": 1
                                            },
                                            "y2": {
                                                "scale": "y",
                                                "signal": "max(datum.pval, 0.1)"
                                            },
                                            "y": {
                                                "scale": "y",
                                                "value": 0
                                            },
                                            "fill": {
                                                "value": "#4C78A8"
                                            },
                                            "stroke": {
                                                "value": "black"
                                            },
                                            "cursor": {
                                                "value": "pointer"
                                            }
                                        },
                                        "update": {
                                            "fillOpacity": [
                                                {
                                                    "test": "datum === select",
                                                    "value": 1
                                                },
                                                {
                                                    "value": 0.3
                                                }
                                            ],
                                            "strokeWidth": [
                                                {
                                                    "test": "datum === select",
                                                    "value": 2
                                                },
                                                {
                                                    "test": "datum === highlight",
                                                    "value": 1
                                                },
                                                {
                                                    "value": 0
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "type": "text",
                                    "encode": {
                                        "enter": {
                                            "align": {
                                                "value": "center"
                                            },
                                            "baseline": {
                                                "value": "bottom"
                                            },
                                            "fill": {
                                                "value": "#333"
                                            }
                                        },
                                        "update": {
                                            "x": {
                                                "scale": "x",
                                                "signal": "tooltip.entity_html",
                                                "band": 0.5
                                            },
                                            "y": {
                                                "scale": "y",
                                                "signal": "tooltip.pval",
                                                "offset": -2
                                            },
                                            "text": {
                                                "signal": "tooltip.pval ? format(tooltip.pval, '.2~e') : ''"
                                            },
                                            "fillOpacity": [
                                                {
                                                    "test": "isNaN(tooltip.pval)",
                                                    "value": 0
                                                },
                                                {
                                                    "value": 1
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        };

                        {# Attach a signal listener to update the genfact entity div when an uncertainty bar is clicked #}
                        if (query2Vals.length > 0) {
                            vegaEmbed("#qpbar", vegaSpec, {"renderer": "svg", "actions": false}).then(result => {
                                result.view.addSignalListener('select', (name, value) => {
                                    if (value) {
                                        document.getElementById("query2-div").innerHTML = value.entity_html;
                                        document.getElementById("genfact_entity").value = JSON.stringify(value.as_object);
                                    }
                                });
                            });
                        }
                    </script>
                    <div class="col-span-3">
                        <label for="autorunPvalThreshold" class="block text-sm font-medium text-gray-900 dark:text-white">Autorun threshold</label>
                        <input id="autorunPvalThreshold" hx-preserve type="range" class="transparent h-[4px] w-full cursor-pointer border-transparent bg-neutral-200 dark:bg-neutral-600" min="0" max="1" step="0.01" value="0.6" />
                    </div>
                    <button id="query2_button" type="submit" class="col-span-1 bottom-1 right-1 font-medium text-sm px-3 py-1.5 text-white bg-blue-700 rounded-lg focus:ring-4 focus:ring-blue-200">Run</button>
                </div>
                {% endblock query2 %}
            </form>
        </section>
    </main>
    <script>
        {# Check the value of incoming query2Vals to see if any cross the autorun thr, and if so, run it #}
        function checkAutorun() {
            console.debug("Checking autorun threshold");

            const autorunPvalThreshold = parseFloat(document.getElementById("autorunPvalThreshold")?.value ?? '1');
            console.debug("Autorun threshold:", autorunPvalThreshold);
            if (query2Vals?.[0]?.pval >= autorunPvalThreshold) {
                console.info("Autorunning query \"", query2Vals[0].query, "\"");
                // Can't just call form.submit(), it will reload the whole page
                htmx.trigger(document.getElementById("query2"), "submit"); 
            } else {
                console.info("No queries met or exceed thr with p>=", autorunPvalThreshold);
            }
        }
    </script>
</body>
</html>