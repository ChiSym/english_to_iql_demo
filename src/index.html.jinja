<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>GenParse/GenSQL demo</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://unpkg.com/htmx.org@1.9.6" integrity="sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni" crossorigin="anonymous"></script>
    <link href="{{url_for('static',path='/output.css')}}" rel="stylesheet">
    <script type="importmap">
      {
        "imports": {
          "@lit-labs/observers/mutation-controller.js":  "https://esm.sh/@lit-labs/observers@2.0.0/mutation-controller.js",
          "json5": "https://esm.sh/json5@2.2.3",
          "lit": "https://esm.sh/lit@2.8.0",
          "lit-html/directives/if-defined": "https://esm.sh/lit-html@3.0.0/directives/if-defined.js",
          "lit/directives/live.js": "https://esm.sh/lit@2.8.0/directives/live.js",
          "lit/directives/ref.js": "https://esm.sh/lit@2.8.0/directives/ref.js",
          "papaparse": "https://esm.sh/papaparse@5.4.1",
          "vega-embed": "https://esm.sh/vega-embed@6.23.0"
        }
      }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
    <script type="module" src="{{url_for('static',path='/iql-language.mjs')}}"></script>
    <script type="module" src="{{url_for('static',path='/iql-code.mjs')}}"></script>
    <script type="module" src="{{url_for('static',path='/iql-textarea.mjs')}}"></script>
    <script src="https://cdn.jsdelivr.net/npm/vega@5.30.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/vega-lite@5.19.0"></script>
    <script src="https://cdn.jsdelivr.net/npm/vega-embed@6.26.0"></script>

    {# Required for overlaying loading indicator on top of textareas. Default htmx classes change opacity which messes with layout #}
    <style>
        .loading-indicator{
            display:none;
        }
        .htmx-request .loading-indicator{
            display:flex;
        }
        .htmx-request.loading-indicator{
            display:flex;
        }
    </style>


</head>
<body>

    <main class="h-dvh flex flex-col flex-nowrap justify-between gap-4 p-2 lg:container lg:mx-auto">
        <div id="chat" class="grow gap-10 overflow-y-auto overflow-x-hidden overscroll-contain h-full">
            {% block plot %}
            <div id="plot-{{idnum}}" class="grid gap-4 grid-cols-2 grid-rows-2 grid-flow-col p-2 justify-self-end {% if idnum and idnum is even %} bg-slate-50 border border-slate-200 {% endif %} ">
                <div id="english-{{idnum}}" class="whitespace-pre-wrap">{{ english_query | default("") }}</div>
                <div id="gensql-{{idnum}}"><iql-code>{{ gensql_query | default("") }}</iql-code></div>
                    {% if chart %}
                        <div id="vis-{{idnum}}" class="row-span-2 w-full h-full overflow-x-auto"></div>
                        <script type="text/javascript">
                            var spec = {{ chart | tojson | safe }} ;
                            var opt = {
                                "renderer": "svg", 
                                "actions": false,
                                "width": "container",
                                "height": "container"
                            };
                            vegaEmbed("#vis-{{idnum}}", spec, opt).then(result => {
                                document.getElementById("vis-{{idnum}}").scrollIntoView({behavior: "smooth", block: "end", inline: "nearest"});
                                console.debug("Inserted plot {{idnum}}");

                                // Add a resize handler
                                function resizeChart() {
                                    result.view.width('container').height('container').run();
                                }

                                // Debounce function to limit how often resizeChart is called
                                function debounce(func, timeout = 250) {
                                    let timer;
                                    return (...args) => {
                                        clearTimeout(timer);
                                        timer = setTimeout(() => { func.apply(this, args); }, timeout);
                                    };
                                }
                                // Add event listener for window resize
                                window.addEventListener('resize', debounce(resizeChart));
                            })
                        </script>
                    {% elif error %}
                        <div id="vis-{{idnum}}" class="row-span-2 text-red-500">Error: {{ error }}</div>
                        <script type="text/javascript">
                            document.getElementById("vis-{{idnum}}").scrollIntoView({behavior: "smooth", block: "end", inline: "nearest"});
                        </script>
                    {% else %}
                        <div id="vis-{{idnum}}" class="row-span-2 text-red-500">Missing fields. Template was given nothing to render.</div>
                        <script>document.getElementById("vis-{{idnum}}").scrollIntoView({behavior: "smooth", block: "end", inline: "nearest"});</script>
                    {% endif %} 
                </script>
            </div>
            {% endblock %}
        </div>

        <section id="inputs" class="flex flex-row flex-initial justify-stretch items-stretch p-2 gap-4">
            <form class="w-full h-full flex flex-col justify-stretch items-end gap-2" hx-post="/post_english_query" hx-target="#iql_query" {# hx-indicator="#iql_query" #}>
                {% block english_query %}
                <label for="english_query" class="w-full mb-2 text-lg font-medium text-gray-900 dark:text-white">English:</label>
                <div class="w-full h-full relative">
                    <div class='loading-indicator absolute flex space-x-2 justify-center items-center bg-white h-full w-full dark:invert'>
                        <span class='sr-only'>Loading...</span>
                        <div class='h-8 w-8 bg-gray-500 rounded-full animate-bounce [animation-delay:-0.3s]'></div>
                        <div class='h-8 w-8 bg-gray-500 rounded-full animate-bounce [animation-delay:-0.15s]'></div>
                        <div class='h-8 w-8 bg-gray-500 rounded-full animate-bounce'></div>
                    </div>
                    <textarea name="english_query" id="english_query" placeholder="Ask a question in plain English" class="p-2 min-h-32 resize-none w-full text-gray-900 bg-gray-50 rounded-sm border border-gray-300 focus:ring-blue-500 focus:border-blue-500 h-full"></textarea>
                </div>
                {% endblock %}
                <button id="english_query_button" type="submit" class="bottom-1 right-1 font-medium text-sm px-3 py-1.5 mb-1 text-white bg-blue-700 rounded-lg focus:ring-4 focus:ring-blue-200">Ask</button>
            </form>
            <form id="iql_query" class="w-full flex flex-col justify-stretch items-end relative" hx-post="/post_iql_query" hx-target="#chat" hx-swap="beforeend" hx-trigger="submit" hx-include="previous [name='english_query']" hx-on::after-settle="checkAutorun()">
                {% block iql_query %}
                <label for="iql_textarea" class="w-full mb-2 text-lg font-medium text-gray-900 dark:text-white">GenSQL:</label>
                <div class="p-1 w-full h-full relative">
                    <div class='loading-indicator absolute flex space-x-2 justify-center items-center bg-white h-full w-full dark:invert'>
                        <span class='sr-only'>Loading...</span>
                        <div class='h-8 w-8 bg-gray-500 rounded-full animate-bounce [animation-delay:-0.3s]'></div>
                        <div class='h-8 w-8 bg-gray-500 rounded-full animate-bounce [animation-delay:-0.15s]'></div>
                        <div class='h-8 w-8 bg-gray-500 rounded-full animate-bounce'></div>
                    </div>
                    <textarea name="iql_query" id="iql_textarea" class="resize-none w-full text-gray-900 bg-gray-50 focus:ring-blue-500 focus:border-blue-500 h-full">{{ iql_query }}</textarea>
                </div>
                <div class="flex flex-row justify-between p-0 w-full">
                    <div id="qpbar"></div>
                    <script>
                        // Array of maps of generated GenSQL and pvals. Each map has keys 'query' and 'pval'.
                        var parses = {{ iql_queries | default([]) | tojson | safe }}; 

                        var vegaSpec = {
                            "$schema": "https://vega.github.io/schema/vega/v5.json",
                            "width": 100,
                            "height": 50,
                            "autosize": "fit-y",
                            "data": [
                                {
                                    "name": "source",
                                    "values": parses
                                },
                                {
                                    "name": "selected",
                                    "source": "source",
                                    "transform": [
                                        {
                                            "type": "filter",
                                            "expr": "datum.selected"
                                        }
                                    ]
                                }
                            ],
                            "signals": [
                                {
                                    "name": "tooltip",
                                    "value": {},
                                    "on": [
                                        {
                                            "events": "rect:mouseover",
                                            "update": "datum"
                                        },
                                        {
                                            "events": "rect:mouseout",
                                            "update": "{}"
                                        }
                                    ]
                                },
                                {
                                    "name": "highlight",
                                    "value": null,
                                    "on": [
                                        {
                                            "events": "mouseover",
                                            "update": "datum"
                                        },
                                        {
                                            "events": "mouseout",
                                            "update": "null"
                                        }
                                    ]
                                },
                                {
                                    "name": "select",
                                    "init": 'data("source")[0]', // They better be ordered...
                                    "on": [
                                        {
                                            "events": "click",
                                            "update": "datum === select ? null : datum"
                                        }
                                    ]
                                }
                            ],
                            "scales": [
                                {
                                    "name": "x",
                                    "type": "band",
                                    "domain": {
                                        "data": "source",
                                        "field": "query"
                                    },
                                    "range": "width",
                                    "padding": 0.2
                                },
                                {
                                    "name": "y",
                                    "type": "linear",
                                    "domain": [0, 1],
                                    "range": "height",
                                    "nice": true,
                                    "zero": true,
                                    "clamp": true
                                }
                            ],
                            "axes": [
                                {
                                    "orient": "bottom",
                                    "scale": "x",
                                    "labels": false,
                                    "ticks": false
                                },
                                {
                                    "orient": "left",
                                    "scale": "y",
                                    "ticks": false,
                                    "labels": false
                                }
                            ],
                            "marks": [
                                {
                                    "type": "rect",
                                    "from": {
                                        "data": "source"
                                    },
                                    "encode": {
                                        "enter": {
                                            "x": {
                                                "scale": "x",
                                                "field": "query"
                                            },
                                            "width": {
                                                "scale": "x",
                                                "band": 1
                                            },
                                            "y2": {
                                                "scale": "y",
                                                "signal": "max(datum.pval, 0.1)"
                                            },
                                            "y": {
                                                "scale": "y",
                                                "value": 0
                                            },
                                            "fill": {
                                                "value": "#4C78A8"
                                            },
                                            "stroke": {
                                                "value": "black"
                                            },
                                            "cursor": {
                                                "value": "pointer"
                                            }
                                        },
                                        "update": {
                                            "fillOpacity": [
                                                {
                                                    "test": "datum === select",
                                                    "value": 1
                                                },
                                                {
                                                    "value": 0.3
                                                }
                                            ],
                                            "strokeWidth": [
                                                {
                                                    "test": "datum === select",
                                                    "value": 2
                                                },
                                                {
                                                    "test": "datum === highlight",
                                                    "value": 1
                                                },
                                                {
                                                    "value": 0
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "type": "text",
                                    "encode": {
                                        "enter": {
                                            "align": {
                                                "value": "center"
                                            },
                                            "baseline": {
                                                "value": "bottom"
                                            },
                                            "fill": {
                                                "value": "#333"
                                            }
                                        },
                                        "update": {
                                            "x": {
                                                "scale": "x",
                                                "signal": "tooltip.query",
                                                "band": 0.5
                                            },
                                            "y": {
                                                "scale": "y",
                                                "signal": "tooltip.pval",
                                                "offset": -2
                                            },
                                            "text": {
                                                "signal": "tooltip.pval ? format(tooltip.pval, '.2~e') : ''"
                                            },
                                            "fillOpacity": [
                                                {
                                                    "test": "isNaN(tooltip.pval)",
                                                    "value": 0
                                                },
                                                {
                                                    "value": 1
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        };

                        {# Attach a signal listener to update the query textarea when an uncertainty bar is clicked #}
                        var vegaResult;
                        vegaEmbed("#qpbar", vegaSpec, {"renderer": "svg", "actions": false}).then(result => {
                            console.debug("Updated query pval bar plot");
                            vegaResult = result;

                            result.view.addSignalListener('select', (name, value) => {
                                if (value) {
                                    console.debug("Clicked bar data:", value);
                                    document.getElementById("iql_textarea").value = value.query;
                                } else {
                                    console.debug("Bar deselected");
                                }
                            });
                        });
                    </script>
                    <div>
                        <label for="autorunPvalThreshold" class="mb-2 inline-block text-sm font-medium text-gray-900 dark:text-white">Autorun threshold</label>
                        <input id="autorunPvalThreshold" hx-preserve type="range" class="transparent h-[4px] w-full cursor-pointer border-transparent bg-neutral-200 dark:bg-neutral-600" min="0" max="1" step="0.01" value="0.6" />
                    </div>
                    <button id="iql_query_button" type="submit" class="bottom-1 right-1 font-medium text-sm px-3 py-1.5 mb-1 text-white bg-blue-700 rounded-lg focus:ring-4 focus:ring-blue-200">Run</button>
                </div>
                {% endblock %}
            </form>
        </section>
    </main>
    <script>
        {# Check the value of incoming parses to see if any cross the autorun thr, and if so, run it #}
        function checkAutorun() {
            console.debug("Checking autorun threshold");

            const autorunPvalThreshold = parseFloat(document.getElementById("autorunPvalThreshold")?.value ?? '1');
            console.debug("Autorun threshold:", autorunPvalThreshold);
            if (parses?.[0]?.pval >= autorunPvalThreshold) {
                console.info("Autorunning query \"", parses[0].query, "\"");
                // Can't just call form.submit(), it will reload the whole page
                htmx.trigger(document.getElementById("iql_query"), "submit"); 
            } else {
                console.info("No queries met or exceed thr with p>=", autorunPvalThreshold);
            }
        }
    </script>
</body>
</html>